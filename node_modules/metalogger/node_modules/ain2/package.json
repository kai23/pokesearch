{
  "name": "ain2",
  "description": "Syslog logging for node.js. Continuation of ain",
  "version": "1.3.1",
  "main": "./index",
  "author": {
    "name": "Alexander Dorofeev",
    "email": "aka.spin@gmail.com"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha test/**/*.spec.js"
  },
  "contributors": [
    {
      "name": "Alexander Dorofeev",
      "email": "aka.spin@gmail.com"
    },
    {
      "name": "Patrick Huesler",
      "email": "patrick.huesler@googlemail.com"
    },
    {
      "name": "Mark Wubben",
      "email": "mark@novemberborn.net"
    },
    {
      "name": "Parham Michael Ossareh",
      "email": "ossareh@gmail.com"
    },
    {
      "name": "Carlos Lage",
      "email": "carlos.lage@livestream.com"
    },
    {
      "name": "J. Maurice",
      "email": "j@wiz.biz"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/phuesler/ain.git"
  },
  "bugs": {
    "url": "http://github.com/phuesler/ain/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/phuesler/ain/master/LICENSE"
    }
  ],
  "devDependencies": {
    "mocha": "~1.12.0",
    "chai": "~1.7.2"
  },
  "optionalDependencies": {
    "unix-dgram": "0.0.3"
  },
  "readme": "# ain*\r\n\r\n\r\nBrain-free [syslog](http://en.wikipedia.org/wiki/Syslog)** logging for \r\n[node.js](http://nodejs.org).\r\n\r\n*Ain* is written with full compatibility with *node.js* `console` module. It \r\nimplements all `console` functions and formatting. Also *ain* supports UTF-8 \r\n(tested on Debian Testing/Sid).\r\n\r\n*Ain* can send messages by UDP to `127.0.0.1:514` or to the a unix socket; \r\n/dev/log on Linux and /var/run/syslog on Mac OS X.  Unix socket support is possible if [unix-dgram](https://npmjs.org/package/unix-dgram) can be built and installed.\r\n\r\n*In the Phoenician alphabet letter \"ain\" indicates eye.\r\n\r\n**All examples tested under Ubuntu `rsyslog`. On other operating \r\nsystems and logging daemons settings and paths may differ.\r\n\r\n## Installation\r\n\r\nYou can install *ain* as usual - by copy the \"ain\" directory in your \r\n`~/.node_modules` or via *npm*\r\n\r\n    npm install ain2\r\n\r\n## Usage\r\n\r\nUsage of *ain* is very similar to the *node.js* console. The following example \r\ndemonstrates the replacement of the console:\r\n\r\n    var SysLogger = require('ain2');\r\n    var console = new SysLogger();\r\n    \r\n    console.log('notice: %d', Date.now());\r\n    console.info('info');\r\n    console.error('error');\r\n    \r\nAfter launch in `/var/log/user` you can see the following:\r\n\r\n    Dec  5 06:45:26 localhost ex.js[6041]: notice: 1291513526013\r\n    Dec  5 06:45:26 localhost ex.js[6041]: info\r\n    Dec  5 06:45:26 localhost ex.js[6041]: error\r\n\r\n## Singleton logger\r\n\r\nIf you want to have a singleton that points to the same object whenever you do a require, use the following:\r\n\r\n\trequire('ain2').getInstance();\r\n\t\r\nIf you use this, please be beware of this:\r\n\r\n\trequire('ain2').getInstance() ===  require('ain2').getInstance();\r\n\t=> true\r\n\t\r\nAs opposed to:\r\n\r\n\tvar SysLogger = require('ain2');\r\n\tnew SysLogger() === new SysLogger();\r\n\t=> false\r\n    \r\n## Changing destinations\r\n\r\nBy default *ain* sets following destinations:\r\n\r\n* `TAG` - `__filename`\r\n* `Facility` - user (1)\r\n* `HOSTNAME` - localhost\r\n* `PORT` - 514\r\n* `Transport` - UDP\r\n\r\nYou can change them by passing in the params to the constructor or by\r\nusing the `set` function. The `set` function is chainable.\r\n\r\n    var SysLogger = require('ain2');\r\n    var logger = new SysLogger({tag: 'node-test-app', facility: 'daemon', hostname: 'devhost', port: 3000});\r\n\r\n    logger.warn('some warning');\r\n    \r\n... and in `/var/log/daemon.log`:\r\n\r\n    Dec  5 07:08:58 devhost node-test-app[10045]: some warning\r\n    \r\nThe `set` function takes one argument, a configuration object which can contain the following keys:\r\n * tag - defaults to __filename\r\n * facility - defaults to user\r\n * hostname - defaults to require('os').hostname()\r\n * port - defaults to 514\r\n * transport - defaults to 'UDP'\r\n * path - path to filesystem socket if using unix_dgram transport\r\n * messageComposer - a custom function to compose syslog messages\r\n\r\nAll of these are optional. If you provide a `hostname` transport is automatically set to UDP\r\n\r\n`tag` and `hostname` arguments is just *RFC 3164* `TAG` and `HOSTNAME` of \r\nyour messages.\r\n\r\n`facility` is little more than just name. Refer to *Section 4.1.1* of \r\n[RFC 3164](http://www.faqs.org/rfcs/rfc3164.html) it can be:\r\n\r\n    ##  String  Description\r\n    -----------------------\r\n     0  kern    kernel messages\r\n     1  user    user-level messages\r\n     2  mail    mail system\r\n     3  daemon  system daemons\r\n     4  auth    security/authorization messages\r\n     5  syslog  messages generated internally by syslog daemon\r\n     6  lpr     line printer subsystem\r\n     7  news    network news subsystem\r\n     8  uucp    UUCP subsystem\r\n    16  local0  local use 0\r\n    17  local1  local use 1\r\n    18  local2  local use 2\r\n    19  local3  local use 3\r\n    20  local4  local use 4\r\n    21  local5  local use 5\r\n    22  local6  local use 6\r\n    23  local7  local use 7\r\n\r\nYou can set the `facility` by `String` or `Number`:\r\n\r\n    logger.set({tag: 'node-test-app', facility: 3});\r\n    logger.set({tag: 'node-test-app', facility: 'daemon'});\r\n    \r\nAlso you can set `TAG`, `Facility`, `HOSTNAME`, `PORT`, and `transport` separately by `setTag`, \r\n`setFacility`, `setHostname`, `setPort`, `setTransport` and `setMessageComposer` functions. All of them are chainable too.\r\n\r\nYou can get all destinations by these properties:\r\n\r\n* `tag` TAG\r\n* `facility` Numerical representation of RFC 3164 facility\r\n* `hostname` HOSTNAME\r\n* `port` PORT\r\n\r\n## Custom message composer\r\n\r\n    var SysLogger = require('ain2');\r\n    var console = new SysLogger();\r\n\r\n    console.setMessageComposer(function(message, severity){\r\n        return new Buffer('<' + (this.facility * 8 + severity) + '>' +\r\n                this.getDate() + ' ' + '[' + process.pid + ']:' + message);\r\n    });\r\n\r\n    \r\n    //The default implementation looks this:\r\n\r\n\r\n    SysLogger.prototype.composeSyslogMessage = function(message, severity) {\r\n        return new Buffer('<' + (this.facility * 8 + severity) + '>' +\r\n                this.getDate() + ' ' + this.hostname + ' ' + \r\n                this.tag + '[' + process.pid + ']:' + message);\r\n    }\r\n\r\n## Logging\r\n\r\nAs noticed before *ain* implements all `console` functions. Severity level is \r\nreferenced to [RFC 3164](http://www.faqs.org/rfcs/rfc3164.html):\r\n\r\n    #  String   Description\r\n    -----------------------\r\n    0  emerg    Emergency: system is unusable\r\n    1  alert    Alert: action must be taken immediately\r\n    2  crit     Critical: critical conditions\r\n    3  err      Error: error conditions\r\n    4  warn     Warning: warning conditions\r\n    5  notice   Notice: normal but significant condition\r\n    6  info     Informational: informational messages\r\n    7  debug    Debug: debug-level messages\r\n\r\n*Ain* `console`-like functions behaviour is fully compatible to *node.js* and \r\nlogs messages with different severity levels: \r\n\r\n* `log` - notice (5)\r\n* `info` - info (6)\r\n* `warn` - warn (4)\r\n* `error` - err (3)\r\n* `dir` - notice (5)\r\n* `time`, `timeEnd` - notice (5)\r\n* `trace` - err (3)\r\n* `assert` - err (3)\r\n\r\nTo log a message with the desired severity level you can use the `send` function:\r\n\r\n    logger.send('message', 'alert');\r\n    \r\nThe `send` function takes two arguments: message and optional severity level. By \r\ndefault, the severity level is *notice*.\r\n\r\n# Development\r\n\r\n    npm install\r\n    npm test\r\n",
  "readmeFilename": "readme.md",
  "dependencies": {
    "unix-dgram": "0.0.3"
  },
  "_id": "ain2@1.3.1",
  "dist": {
    "shasum": "d56d77ba0abaee304b027676e0936a3056dea0de"
  },
  "_from": "ain2@1.x",
  "_resolved": "https://registry.npmjs.org/ain2/-/ain2-1.3.1.tgz"
}
